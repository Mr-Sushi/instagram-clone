/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Comment.Comment', null, global);
goog.exportSymbol('proto.Comment.CommentList', null, global);
goog.exportSymbol('proto.Comment.CreateCommentErrorStatus', null, global);
goog.exportSymbol('proto.Comment.CreateCommentRequest', null, global);
goog.exportSymbol('proto.Comment.CreateCommentResponse', null, global);
goog.exportSymbol('proto.Comment.DeleteCommentErrorStatus', null, global);
goog.exportSymbol('proto.Comment.DeleteCommentRequest', null, global);
goog.exportSymbol('proto.Comment.DeleteCommentResponse', null, global);
goog.exportSymbol('proto.Comment.GetCommentErrorStatus', null, global);
goog.exportSymbol('proto.Comment.GetCommentRequest', null, global);
goog.exportSymbol('proto.Comment.GetCommentResponse', null, global);
goog.exportSymbol('proto.Comment.GetCommentsByTagErrorStatus', null, global);
goog.exportSymbol('proto.Comment.GetCommentsByTagRequest', null, global);
goog.exportSymbol('proto.Comment.GetCommentsByTagResponse', null, global);
goog.exportSymbol('proto.Comment.GetCommentsByUserTagErrorStatus', null, global);
goog.exportSymbol('proto.Comment.GetCommentsByUserTagRequest', null, global);
goog.exportSymbol('proto.Comment.GetCommentsByUserTagResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Comment.CreateCommentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Comment.CreateCommentRequest.repeatedFields_, null);
};
goog.inherits(proto.Comment.CreateCommentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Comment.CreateCommentRequest.displayName = 'proto.Comment.CreateCommentRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Comment.CreateCommentRequest.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Comment.CreateCommentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Comment.CreateCommentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Comment.CreateCommentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.CreateCommentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    comment: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    imageId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tagsList: jspb.Message.getRepeatedField(msg, 4),
    userTagsList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Comment.CreateCommentRequest}
 */
proto.Comment.CreateCommentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Comment.CreateCommentRequest;
  return proto.Comment.CreateCommentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Comment.CreateCommentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Comment.CreateCommentRequest}
 */
proto.Comment.CreateCommentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Comment.CreateCommentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Comment.CreateCommentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Comment.CreateCommentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.CreateCommentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getImageId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getUserTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional string comment = 1;
 * @return {string}
 */
proto.Comment.CreateCommentRequest.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Comment.CreateCommentRequest.prototype.setComment = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.Comment.CreateCommentRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Comment.CreateCommentRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string image_id = 3;
 * @return {string}
 */
proto.Comment.CreateCommentRequest.prototype.getImageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Comment.CreateCommentRequest.prototype.setImageId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string tags = 4;
 * @return {!Array<string>}
 */
proto.Comment.CreateCommentRequest.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.Comment.CreateCommentRequest.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.Comment.CreateCommentRequest.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.Comment.CreateCommentRequest.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * repeated string user_tags = 5;
 * @return {!Array<string>}
 */
proto.Comment.CreateCommentRequest.prototype.getUserTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.Comment.CreateCommentRequest.prototype.setUserTagsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.Comment.CreateCommentRequest.prototype.addUserTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.Comment.CreateCommentRequest.prototype.clearUserTagsList = function() {
  this.setUserTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Comment.CreateCommentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Comment.CreateCommentResponse.oneofGroups_);
};
goog.inherits(proto.Comment.CreateCommentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Comment.CreateCommentResponse.displayName = 'proto.Comment.CreateCommentResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Comment.CreateCommentResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Comment.CreateCommentResponse.StatusCase = {
  STATUS_NOT_SET: 0,
  COMMENT: 1,
  ERROR: 2
};

/**
 * @return {proto.Comment.CreateCommentResponse.StatusCase}
 */
proto.Comment.CreateCommentResponse.prototype.getStatusCase = function() {
  return /** @type {proto.Comment.CreateCommentResponse.StatusCase} */(jspb.Message.computeOneofCase(this, proto.Comment.CreateCommentResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Comment.CreateCommentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Comment.CreateCommentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Comment.CreateCommentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.CreateCommentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    comment: (f = msg.getComment()) && proto.Comment.Comment.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Comment.CreateCommentResponse}
 */
proto.Comment.CreateCommentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Comment.CreateCommentResponse;
  return proto.Comment.CreateCommentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Comment.CreateCommentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Comment.CreateCommentResponse}
 */
proto.Comment.CreateCommentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Comment.Comment;
      reader.readMessage(value,proto.Comment.Comment.deserializeBinaryFromReader);
      msg.setComment(value);
      break;
    case 2:
      var value = /** @type {!proto.Comment.CreateCommentErrorStatus} */ (reader.readEnum());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Comment.CreateCommentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Comment.CreateCommentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Comment.CreateCommentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.CreateCommentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Comment.Comment.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Comment.CreateCommentErrorStatus} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Comment comment = 1;
 * @return {?proto.Comment.Comment}
 */
proto.Comment.CreateCommentResponse.prototype.getComment = function() {
  return /** @type{?proto.Comment.Comment} */ (
    jspb.Message.getWrapperField(this, proto.Comment.Comment, 1));
};


/** @param {?proto.Comment.Comment|undefined} value */
proto.Comment.CreateCommentResponse.prototype.setComment = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Comment.CreateCommentResponse.oneofGroups_[0], value);
};


proto.Comment.CreateCommentResponse.prototype.clearComment = function() {
  this.setComment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Comment.CreateCommentResponse.prototype.hasComment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CreateCommentErrorStatus error = 2;
 * @return {!proto.Comment.CreateCommentErrorStatus}
 */
proto.Comment.CreateCommentResponse.prototype.getError = function() {
  return /** @type {!proto.Comment.CreateCommentErrorStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Comment.CreateCommentErrorStatus} value */
proto.Comment.CreateCommentResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 2, proto.Comment.CreateCommentResponse.oneofGroups_[0], value);
};


proto.Comment.CreateCommentResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 2, proto.Comment.CreateCommentResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Comment.CreateCommentResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Comment.GetCommentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Comment.GetCommentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Comment.GetCommentRequest.displayName = 'proto.Comment.GetCommentRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Comment.GetCommentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Comment.GetCommentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Comment.GetCommentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.GetCommentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Comment.GetCommentRequest}
 */
proto.Comment.GetCommentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Comment.GetCommentRequest;
  return proto.Comment.GetCommentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Comment.GetCommentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Comment.GetCommentRequest}
 */
proto.Comment.GetCommentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommentid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Comment.GetCommentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Comment.GetCommentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Comment.GetCommentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.GetCommentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommentid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string commentId = 1;
 * @return {string}
 */
proto.Comment.GetCommentRequest.prototype.getCommentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Comment.GetCommentRequest.prototype.setCommentid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Comment.GetCommentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Comment.GetCommentResponse.oneofGroups_);
};
goog.inherits(proto.Comment.GetCommentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Comment.GetCommentResponse.displayName = 'proto.Comment.GetCommentResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Comment.GetCommentResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Comment.GetCommentResponse.StatusCase = {
  STATUS_NOT_SET: 0,
  COMMENT: 1,
  ERROR: 2
};

/**
 * @return {proto.Comment.GetCommentResponse.StatusCase}
 */
proto.Comment.GetCommentResponse.prototype.getStatusCase = function() {
  return /** @type {proto.Comment.GetCommentResponse.StatusCase} */(jspb.Message.computeOneofCase(this, proto.Comment.GetCommentResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Comment.GetCommentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Comment.GetCommentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Comment.GetCommentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.GetCommentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    comment: (f = msg.getComment()) && proto.Comment.Comment.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Comment.GetCommentResponse}
 */
proto.Comment.GetCommentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Comment.GetCommentResponse;
  return proto.Comment.GetCommentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Comment.GetCommentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Comment.GetCommentResponse}
 */
proto.Comment.GetCommentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Comment.Comment;
      reader.readMessage(value,proto.Comment.Comment.deserializeBinaryFromReader);
      msg.setComment(value);
      break;
    case 2:
      var value = /** @type {!proto.Comment.GetCommentErrorStatus} */ (reader.readEnum());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Comment.GetCommentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Comment.GetCommentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Comment.GetCommentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.GetCommentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Comment.Comment.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Comment.GetCommentErrorStatus} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Comment comment = 1;
 * @return {?proto.Comment.Comment}
 */
proto.Comment.GetCommentResponse.prototype.getComment = function() {
  return /** @type{?proto.Comment.Comment} */ (
    jspb.Message.getWrapperField(this, proto.Comment.Comment, 1));
};


/** @param {?proto.Comment.Comment|undefined} value */
proto.Comment.GetCommentResponse.prototype.setComment = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Comment.GetCommentResponse.oneofGroups_[0], value);
};


proto.Comment.GetCommentResponse.prototype.clearComment = function() {
  this.setComment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Comment.GetCommentResponse.prototype.hasComment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetCommentErrorStatus error = 2;
 * @return {!proto.Comment.GetCommentErrorStatus}
 */
proto.Comment.GetCommentResponse.prototype.getError = function() {
  return /** @type {!proto.Comment.GetCommentErrorStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Comment.GetCommentErrorStatus} value */
proto.Comment.GetCommentResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 2, proto.Comment.GetCommentResponse.oneofGroups_[0], value);
};


proto.Comment.GetCommentResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 2, proto.Comment.GetCommentResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Comment.GetCommentResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Comment.DeleteCommentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Comment.DeleteCommentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Comment.DeleteCommentRequest.displayName = 'proto.Comment.DeleteCommentRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Comment.DeleteCommentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Comment.DeleteCommentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Comment.DeleteCommentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.DeleteCommentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Comment.DeleteCommentRequest}
 */
proto.Comment.DeleteCommentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Comment.DeleteCommentRequest;
  return proto.Comment.DeleteCommentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Comment.DeleteCommentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Comment.DeleteCommentRequest}
 */
proto.Comment.DeleteCommentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommentid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Comment.DeleteCommentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Comment.DeleteCommentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Comment.DeleteCommentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.DeleteCommentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommentid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string commentId = 1;
 * @return {string}
 */
proto.Comment.DeleteCommentRequest.prototype.getCommentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Comment.DeleteCommentRequest.prototype.setCommentid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Comment.DeleteCommentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Comment.DeleteCommentResponse.oneofGroups_);
};
goog.inherits(proto.Comment.DeleteCommentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Comment.DeleteCommentResponse.displayName = 'proto.Comment.DeleteCommentResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Comment.DeleteCommentResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Comment.DeleteCommentResponse.StatusCase = {
  STATUS_NOT_SET: 0,
  COMMENTID: 1,
  ERROR: 2
};

/**
 * @return {proto.Comment.DeleteCommentResponse.StatusCase}
 */
proto.Comment.DeleteCommentResponse.prototype.getStatusCase = function() {
  return /** @type {proto.Comment.DeleteCommentResponse.StatusCase} */(jspb.Message.computeOneofCase(this, proto.Comment.DeleteCommentResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Comment.DeleteCommentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Comment.DeleteCommentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Comment.DeleteCommentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.DeleteCommentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Comment.DeleteCommentResponse}
 */
proto.Comment.DeleteCommentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Comment.DeleteCommentResponse;
  return proto.Comment.DeleteCommentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Comment.DeleteCommentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Comment.DeleteCommentResponse}
 */
proto.Comment.DeleteCommentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommentid(value);
      break;
    case 2:
      var value = /** @type {!proto.Comment.DeleteCommentErrorStatus} */ (reader.readEnum());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Comment.DeleteCommentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Comment.DeleteCommentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Comment.DeleteCommentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.DeleteCommentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.Comment.DeleteCommentErrorStatus} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string commentId = 1;
 * @return {string}
 */
proto.Comment.DeleteCommentResponse.prototype.getCommentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Comment.DeleteCommentResponse.prototype.setCommentid = function(value) {
  jspb.Message.setOneofField(this, 1, proto.Comment.DeleteCommentResponse.oneofGroups_[0], value);
};


proto.Comment.DeleteCommentResponse.prototype.clearCommentid = function() {
  jspb.Message.setOneofField(this, 1, proto.Comment.DeleteCommentResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Comment.DeleteCommentResponse.prototype.hasCommentid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeleteCommentErrorStatus error = 2;
 * @return {!proto.Comment.DeleteCommentErrorStatus}
 */
proto.Comment.DeleteCommentResponse.prototype.getError = function() {
  return /** @type {!proto.Comment.DeleteCommentErrorStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Comment.DeleteCommentErrorStatus} value */
proto.Comment.DeleteCommentResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 2, proto.Comment.DeleteCommentResponse.oneofGroups_[0], value);
};


proto.Comment.DeleteCommentResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 2, proto.Comment.DeleteCommentResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Comment.DeleteCommentResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Comment.GetCommentsByTagRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Comment.GetCommentsByTagRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Comment.GetCommentsByTagRequest.displayName = 'proto.Comment.GetCommentsByTagRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Comment.GetCommentsByTagRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Comment.GetCommentsByTagRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Comment.GetCommentsByTagRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.GetCommentsByTagRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tag: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Comment.GetCommentsByTagRequest}
 */
proto.Comment.GetCommentsByTagRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Comment.GetCommentsByTagRequest;
  return proto.Comment.GetCommentsByTagRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Comment.GetCommentsByTagRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Comment.GetCommentsByTagRequest}
 */
proto.Comment.GetCommentsByTagRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Comment.GetCommentsByTagRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Comment.GetCommentsByTagRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Comment.GetCommentsByTagRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.GetCommentsByTagRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tag = 1;
 * @return {string}
 */
proto.Comment.GetCommentsByTagRequest.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Comment.GetCommentsByTagRequest.prototype.setTag = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Comment.GetCommentsByTagResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Comment.GetCommentsByTagResponse.oneofGroups_);
};
goog.inherits(proto.Comment.GetCommentsByTagResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Comment.GetCommentsByTagResponse.displayName = 'proto.Comment.GetCommentsByTagResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Comment.GetCommentsByTagResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Comment.GetCommentsByTagResponse.StatusCase = {
  STATUS_NOT_SET: 0,
  COMMENTS: 1,
  ERROR: 2
};

/**
 * @return {proto.Comment.GetCommentsByTagResponse.StatusCase}
 */
proto.Comment.GetCommentsByTagResponse.prototype.getStatusCase = function() {
  return /** @type {proto.Comment.GetCommentsByTagResponse.StatusCase} */(jspb.Message.computeOneofCase(this, proto.Comment.GetCommentsByTagResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Comment.GetCommentsByTagResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Comment.GetCommentsByTagResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Comment.GetCommentsByTagResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.GetCommentsByTagResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    comments: (f = msg.getComments()) && proto.Comment.CommentList.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Comment.GetCommentsByTagResponse}
 */
proto.Comment.GetCommentsByTagResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Comment.GetCommentsByTagResponse;
  return proto.Comment.GetCommentsByTagResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Comment.GetCommentsByTagResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Comment.GetCommentsByTagResponse}
 */
proto.Comment.GetCommentsByTagResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Comment.CommentList;
      reader.readMessage(value,proto.Comment.CommentList.deserializeBinaryFromReader);
      msg.setComments(value);
      break;
    case 2:
      var value = /** @type {!proto.Comment.GetCommentsByTagErrorStatus} */ (reader.readEnum());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Comment.GetCommentsByTagResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Comment.GetCommentsByTagResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Comment.GetCommentsByTagResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.GetCommentsByTagResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComments();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Comment.CommentList.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Comment.GetCommentsByTagErrorStatus} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional CommentList comments = 1;
 * @return {?proto.Comment.CommentList}
 */
proto.Comment.GetCommentsByTagResponse.prototype.getComments = function() {
  return /** @type{?proto.Comment.CommentList} */ (
    jspb.Message.getWrapperField(this, proto.Comment.CommentList, 1));
};


/** @param {?proto.Comment.CommentList|undefined} value */
proto.Comment.GetCommentsByTagResponse.prototype.setComments = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Comment.GetCommentsByTagResponse.oneofGroups_[0], value);
};


proto.Comment.GetCommentsByTagResponse.prototype.clearComments = function() {
  this.setComments(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Comment.GetCommentsByTagResponse.prototype.hasComments = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetCommentsByTagErrorStatus error = 2;
 * @return {!proto.Comment.GetCommentsByTagErrorStatus}
 */
proto.Comment.GetCommentsByTagResponse.prototype.getError = function() {
  return /** @type {!proto.Comment.GetCommentsByTagErrorStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Comment.GetCommentsByTagErrorStatus} value */
proto.Comment.GetCommentsByTagResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 2, proto.Comment.GetCommentsByTagResponse.oneofGroups_[0], value);
};


proto.Comment.GetCommentsByTagResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 2, proto.Comment.GetCommentsByTagResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Comment.GetCommentsByTagResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Comment.CommentList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Comment.CommentList.repeatedFields_, null);
};
goog.inherits(proto.Comment.CommentList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Comment.CommentList.displayName = 'proto.Comment.CommentList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Comment.CommentList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Comment.CommentList.prototype.toObject = function(opt_includeInstance) {
  return proto.Comment.CommentList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Comment.CommentList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.CommentList.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentsList: jspb.Message.toObjectList(msg.getCommentsList(),
    proto.Comment.Comment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Comment.CommentList}
 */
proto.Comment.CommentList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Comment.CommentList;
  return proto.Comment.CommentList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Comment.CommentList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Comment.CommentList}
 */
proto.Comment.CommentList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Comment.Comment;
      reader.readMessage(value,proto.Comment.Comment.deserializeBinaryFromReader);
      msg.addComments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Comment.CommentList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Comment.CommentList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Comment.CommentList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.CommentList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Comment.Comment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Comment comments = 1;
 * @return {!Array<!proto.Comment.Comment>}
 */
proto.Comment.CommentList.prototype.getCommentsList = function() {
  return /** @type{!Array<!proto.Comment.Comment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Comment.Comment, 1));
};


/** @param {!Array<!proto.Comment.Comment>} value */
proto.Comment.CommentList.prototype.setCommentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Comment.Comment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Comment.Comment}
 */
proto.Comment.CommentList.prototype.addComments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Comment.Comment, opt_index);
};


proto.Comment.CommentList.prototype.clearCommentsList = function() {
  this.setCommentsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Comment.GetCommentsByUserTagRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Comment.GetCommentsByUserTagRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Comment.GetCommentsByUserTagRequest.displayName = 'proto.Comment.GetCommentsByUserTagRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Comment.GetCommentsByUserTagRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Comment.GetCommentsByUserTagRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Comment.GetCommentsByUserTagRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.GetCommentsByUserTagRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tag: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Comment.GetCommentsByUserTagRequest}
 */
proto.Comment.GetCommentsByUserTagRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Comment.GetCommentsByUserTagRequest;
  return proto.Comment.GetCommentsByUserTagRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Comment.GetCommentsByUserTagRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Comment.GetCommentsByUserTagRequest}
 */
proto.Comment.GetCommentsByUserTagRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Comment.GetCommentsByUserTagRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Comment.GetCommentsByUserTagRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Comment.GetCommentsByUserTagRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.GetCommentsByUserTagRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tag = 1;
 * @return {string}
 */
proto.Comment.GetCommentsByUserTagRequest.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Comment.GetCommentsByUserTagRequest.prototype.setTag = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Comment.GetCommentsByUserTagResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Comment.GetCommentsByUserTagResponse.oneofGroups_);
};
goog.inherits(proto.Comment.GetCommentsByUserTagResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Comment.GetCommentsByUserTagResponse.displayName = 'proto.Comment.GetCommentsByUserTagResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Comment.GetCommentsByUserTagResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Comment.GetCommentsByUserTagResponse.StatusCase = {
  STATUS_NOT_SET: 0,
  COMMENTS: 1,
  ERROR: 2
};

/**
 * @return {proto.Comment.GetCommentsByUserTagResponse.StatusCase}
 */
proto.Comment.GetCommentsByUserTagResponse.prototype.getStatusCase = function() {
  return /** @type {proto.Comment.GetCommentsByUserTagResponse.StatusCase} */(jspb.Message.computeOneofCase(this, proto.Comment.GetCommentsByUserTagResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Comment.GetCommentsByUserTagResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Comment.GetCommentsByUserTagResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Comment.GetCommentsByUserTagResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.GetCommentsByUserTagResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    comments: (f = msg.getComments()) && proto.Comment.CommentList.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Comment.GetCommentsByUserTagResponse}
 */
proto.Comment.GetCommentsByUserTagResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Comment.GetCommentsByUserTagResponse;
  return proto.Comment.GetCommentsByUserTagResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Comment.GetCommentsByUserTagResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Comment.GetCommentsByUserTagResponse}
 */
proto.Comment.GetCommentsByUserTagResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Comment.CommentList;
      reader.readMessage(value,proto.Comment.CommentList.deserializeBinaryFromReader);
      msg.setComments(value);
      break;
    case 2:
      var value = /** @type {!proto.Comment.GetCommentsByUserTagErrorStatus} */ (reader.readEnum());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Comment.GetCommentsByUserTagResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Comment.GetCommentsByUserTagResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Comment.GetCommentsByUserTagResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.GetCommentsByUserTagResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComments();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Comment.CommentList.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Comment.GetCommentsByUserTagErrorStatus} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional CommentList comments = 1;
 * @return {?proto.Comment.CommentList}
 */
proto.Comment.GetCommentsByUserTagResponse.prototype.getComments = function() {
  return /** @type{?proto.Comment.CommentList} */ (
    jspb.Message.getWrapperField(this, proto.Comment.CommentList, 1));
};


/** @param {?proto.Comment.CommentList|undefined} value */
proto.Comment.GetCommentsByUserTagResponse.prototype.setComments = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Comment.GetCommentsByUserTagResponse.oneofGroups_[0], value);
};


proto.Comment.GetCommentsByUserTagResponse.prototype.clearComments = function() {
  this.setComments(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Comment.GetCommentsByUserTagResponse.prototype.hasComments = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetCommentsByUserTagErrorStatus error = 2;
 * @return {!proto.Comment.GetCommentsByUserTagErrorStatus}
 */
proto.Comment.GetCommentsByUserTagResponse.prototype.getError = function() {
  return /** @type {!proto.Comment.GetCommentsByUserTagErrorStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Comment.GetCommentsByUserTagErrorStatus} value */
proto.Comment.GetCommentsByUserTagResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 2, proto.Comment.GetCommentsByUserTagResponse.oneofGroups_[0], value);
};


proto.Comment.GetCommentsByUserTagResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 2, proto.Comment.GetCommentsByUserTagResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Comment.GetCommentsByUserTagResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Comment.Comment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Comment.Comment.repeatedFields_, null);
};
goog.inherits(proto.Comment.Comment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Comment.Comment.displayName = 'proto.Comment.Comment';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Comment.Comment.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Comment.Comment.prototype.toObject = function(opt_includeInstance) {
  return proto.Comment.Comment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Comment.Comment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.Comment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    content: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    imageId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tagsList: jspb.Message.getRepeatedField(msg, 6),
    usertagsList: jspb.Message.getRepeatedField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Comment.Comment}
 */
proto.Comment.Comment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Comment.Comment;
  return proto.Comment.Comment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Comment.Comment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Comment.Comment}
 */
proto.Comment.Comment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addUsertags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Comment.Comment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Comment.Comment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Comment.Comment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Comment.Comment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getImageId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getUsertagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Comment.Comment.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Comment.Comment.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.Comment.Comment.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Comment.Comment.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_id = 3;
 * @return {string}
 */
proto.Comment.Comment.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Comment.Comment.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string image_id = 4;
 * @return {string}
 */
proto.Comment.Comment.prototype.getImageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Comment.Comment.prototype.setImageId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string created_at = 5;
 * @return {string}
 */
proto.Comment.Comment.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Comment.Comment.prototype.setCreatedAt = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string tags = 6;
 * @return {!Array<string>}
 */
proto.Comment.Comment.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.Comment.Comment.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.Comment.Comment.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.Comment.Comment.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * repeated string userTags = 7;
 * @return {!Array<string>}
 */
proto.Comment.Comment.prototype.getUsertagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.Comment.Comment.prototype.setUsertagsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.Comment.Comment.prototype.addUsertags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.Comment.Comment.prototype.clearUsertagsList = function() {
  this.setUsertagsList([]);
};


/**
 * @enum {number}
 */
proto.Comment.GetCommentsByTagErrorStatus = {
  GET_BY_TAG_SERVER_ERROR: 0
};

/**
 * @enum {number}
 */
proto.Comment.GetCommentsByUserTagErrorStatus = {
  GET_BY_USER_TAG_SERVER_ERROR: 0
};

/**
 * @enum {number}
 */
proto.Comment.DeleteCommentErrorStatus = {
  DELETE_NOT_FOUND: 0,
  DELETE_SERVER_ERROR: 1
};

/**
 * @enum {number}
 */
proto.Comment.CreateCommentErrorStatus = {
  CREATE_SERVER_ERROR: 0,
  CREATE_INVALID_PARAMETER: 1
};

/**
 * @enum {number}
 */
proto.Comment.GetCommentErrorStatus = {
  GET_SERVER_ERROR: 0,
  GET_NOT_FOUND: 1
};

goog.object.extend(exports, proto.Comment);
