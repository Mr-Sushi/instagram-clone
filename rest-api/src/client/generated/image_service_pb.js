/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Image.CreateImageErrorStatus', null, global);
goog.exportSymbol('proto.Image.CreateImageRequest', null, global);
goog.exportSymbol('proto.Image.CreateImageResponse', null, global);
goog.exportSymbol('proto.Image.DeleteImageRequest', null, global);
goog.exportSymbol('proto.Image.DeleteImageResponse', null, global);
goog.exportSymbol('proto.Image.DeleteImageStatus', null, global);
goog.exportSymbol('proto.Image.GetImageDataRequest', null, global);
goog.exportSymbol('proto.Image.GetImageDataResponse', null, global);
goog.exportSymbol('proto.Image.GetImageErrorStatus', null, global);
goog.exportSymbol('proto.Image.GetImageRequest', null, global);
goog.exportSymbol('proto.Image.GetImageResponse', null, global);
goog.exportSymbol('proto.Image.GetLikesErrorStatus', null, global);
goog.exportSymbol('proto.Image.GetLikesRequest', null, global);
goog.exportSymbol('proto.Image.GetLikesResponse', null, global);
goog.exportSymbol('proto.Image.GetUserImagesErrorStatus', null, global);
goog.exportSymbol('proto.Image.GetUserImagesRequest', null, global);
goog.exportSymbol('proto.Image.GetUserImagesResponse', null, global);
goog.exportSymbol('proto.Image.Image', null, global);
goog.exportSymbol('proto.Image.ImageLikesPage', null, global);
goog.exportSymbol('proto.Image.ImageSearchPage', null, global);
goog.exportSymbol('proto.Image.ImageType', null, global);
goog.exportSymbol('proto.Image.LikeImageRequest', null, global);
goog.exportSymbol('proto.Image.LikeImageResponse', null, global);
goog.exportSymbol('proto.Image.LikeImageResponseStatus', null, global);
goog.exportSymbol('proto.Image.Metadata', null, global);
goog.exportSymbol('proto.Image.SearchImagesErrorStatus', null, global);
goog.exportSymbol('proto.Image.SearchImagesRequest', null, global);
goog.exportSymbol('proto.Image.SearchImagesResponse', null, global);
goog.exportSymbol('proto.Image.UserImagePage', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.CreateImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Image.CreateImageRequest.oneofGroups_);
};
goog.inherits(proto.Image.CreateImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.CreateImageRequest.displayName = 'proto.Image.CreateImageRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Image.CreateImageRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Image.CreateImageRequest.PartCase = {
  PART_NOT_SET: 0,
  META_DATA: 1,
  DATA: 2
};

/**
 * @return {proto.Image.CreateImageRequest.PartCase}
 */
proto.Image.CreateImageRequest.prototype.getPartCase = function() {
  return /** @type {proto.Image.CreateImageRequest.PartCase} */(jspb.Message.computeOneofCase(this, proto.Image.CreateImageRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.CreateImageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.CreateImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.CreateImageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.CreateImageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metaData: (f = msg.getMetaData()) && proto.Image.Metadata.toObject(includeInstance, f),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.CreateImageRequest}
 */
proto.Image.CreateImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.CreateImageRequest;
  return proto.Image.CreateImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.CreateImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.CreateImageRequest}
 */
proto.Image.CreateImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Image.Metadata;
      reader.readMessage(value,proto.Image.Metadata.deserializeBinaryFromReader);
      msg.setMetaData(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.CreateImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.CreateImageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.CreateImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.CreateImageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetaData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Image.Metadata.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional Metadata meta_data = 1;
 * @return {?proto.Image.Metadata}
 */
proto.Image.CreateImageRequest.prototype.getMetaData = function() {
  return /** @type{?proto.Image.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.Image.Metadata, 1));
};


/** @param {?proto.Image.Metadata|undefined} value */
proto.Image.CreateImageRequest.prototype.setMetaData = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Image.CreateImageRequest.oneofGroups_[0], value);
};


proto.Image.CreateImageRequest.prototype.clearMetaData = function() {
  this.setMetaData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.CreateImageRequest.prototype.hasMetaData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Image.CreateImageRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.Image.CreateImageRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.Image.CreateImageRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.Image.CreateImageRequest.prototype.setData = function(value) {
  jspb.Message.setOneofField(this, 2, proto.Image.CreateImageRequest.oneofGroups_[0], value);
};


proto.Image.CreateImageRequest.prototype.clearData = function() {
  jspb.Message.setOneofField(this, 2, proto.Image.CreateImageRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.CreateImageRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Image.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.Metadata.displayName = 'proto.Image.Metadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    caption: jspb.Message.getFieldWithDefault(msg, 1, ""),
    creatorId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    imageType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.Metadata}
 */
proto.Image.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.Metadata;
  return proto.Image.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.Metadata}
 */
proto.Image.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaption(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatorId(value);
      break;
    case 3:
      var value = /** @type {!proto.Image.ImageType} */ (reader.readEnum());
      msg.setImageType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCaption();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreatorId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getImageType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string caption = 1;
 * @return {string}
 */
proto.Image.Metadata.prototype.getCaption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Image.Metadata.prototype.setCaption = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string creator_id = 2;
 * @return {string}
 */
proto.Image.Metadata.prototype.getCreatorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Image.Metadata.prototype.setCreatorId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ImageType image_type = 3;
 * @return {!proto.Image.ImageType}
 */
proto.Image.Metadata.prototype.getImageType = function() {
  return /** @type {!proto.Image.ImageType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.Image.ImageType} value */
proto.Image.Metadata.prototype.setImageType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.CreateImageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Image.CreateImageResponse.oneofGroups_);
};
goog.inherits(proto.Image.CreateImageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.CreateImageResponse.displayName = 'proto.Image.CreateImageResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Image.CreateImageResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Image.CreateImageResponse.StatusCase = {
  STATUS_NOT_SET: 0,
  IMAGE: 1,
  ERROR: 2
};

/**
 * @return {proto.Image.CreateImageResponse.StatusCase}
 */
proto.Image.CreateImageResponse.prototype.getStatusCase = function() {
  return /** @type {proto.Image.CreateImageResponse.StatusCase} */(jspb.Message.computeOneofCase(this, proto.Image.CreateImageResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.CreateImageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.CreateImageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.CreateImageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.CreateImageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    image: (f = msg.getImage()) && proto.Image.Image.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.CreateImageResponse}
 */
proto.Image.CreateImageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.CreateImageResponse;
  return proto.Image.CreateImageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.CreateImageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.CreateImageResponse}
 */
proto.Image.CreateImageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Image.Image;
      reader.readMessage(value,proto.Image.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 2:
      var value = /** @type {!proto.Image.CreateImageErrorStatus} */ (reader.readEnum());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.CreateImageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.CreateImageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.CreateImageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.CreateImageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Image.Image.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Image.CreateImageErrorStatus} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Image image = 1;
 * @return {?proto.Image.Image}
 */
proto.Image.CreateImageResponse.prototype.getImage = function() {
  return /** @type{?proto.Image.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image.Image, 1));
};


/** @param {?proto.Image.Image|undefined} value */
proto.Image.CreateImageResponse.prototype.setImage = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Image.CreateImageResponse.oneofGroups_[0], value);
};


proto.Image.CreateImageResponse.prototype.clearImage = function() {
  this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.CreateImageResponse.prototype.hasImage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CreateImageErrorStatus error = 2;
 * @return {!proto.Image.CreateImageErrorStatus}
 */
proto.Image.CreateImageResponse.prototype.getError = function() {
  return /** @type {!proto.Image.CreateImageErrorStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Image.CreateImageErrorStatus} value */
proto.Image.CreateImageResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 2, proto.Image.CreateImageResponse.oneofGroups_[0], value);
};


proto.Image.CreateImageResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 2, proto.Image.CreateImageResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.CreateImageResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.DeleteImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Image.DeleteImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.DeleteImageRequest.displayName = 'proto.Image.DeleteImageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.DeleteImageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.DeleteImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.DeleteImageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.DeleteImageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.DeleteImageRequest}
 */
proto.Image.DeleteImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.DeleteImageRequest;
  return proto.Image.DeleteImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.DeleteImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.DeleteImageRequest}
 */
proto.Image.DeleteImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.DeleteImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.DeleteImageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.DeleteImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.DeleteImageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Image.DeleteImageRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Image.DeleteImageRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.DeleteImageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Image.DeleteImageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.DeleteImageResponse.displayName = 'proto.Image.DeleteImageResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.DeleteImageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.DeleteImageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.DeleteImageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.DeleteImageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.DeleteImageResponse}
 */
proto.Image.DeleteImageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.DeleteImageResponse;
  return proto.Image.DeleteImageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.DeleteImageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.DeleteImageResponse}
 */
proto.Image.DeleteImageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Image.DeleteImageStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.DeleteImageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.DeleteImageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.DeleteImageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.DeleteImageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional DeleteImageStatus status = 1;
 * @return {!proto.Image.DeleteImageStatus}
 */
proto.Image.DeleteImageResponse.prototype.getStatus = function() {
  return /** @type {!proto.Image.DeleteImageStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Image.DeleteImageStatus} value */
proto.Image.DeleteImageResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.GetImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Image.GetImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.GetImageRequest.displayName = 'proto.Image.GetImageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.GetImageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.GetImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.GetImageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.GetImageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    imageId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.GetImageRequest}
 */
proto.Image.GetImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.GetImageRequest;
  return proto.Image.GetImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.GetImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.GetImageRequest}
 */
proto.Image.GetImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.GetImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.GetImageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.GetImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.GetImageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImageId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string image_id = 1;
 * @return {string}
 */
proto.Image.GetImageRequest.prototype.getImageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Image.GetImageRequest.prototype.setImageId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.GetImageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Image.GetImageResponse.oneofGroups_);
};
goog.inherits(proto.Image.GetImageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.GetImageResponse.displayName = 'proto.Image.GetImageResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Image.GetImageResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Image.GetImageResponse.StatusCase = {
  STATUS_NOT_SET: 0,
  IMAGE: 1,
  ERROR: 2
};

/**
 * @return {proto.Image.GetImageResponse.StatusCase}
 */
proto.Image.GetImageResponse.prototype.getStatusCase = function() {
  return /** @type {proto.Image.GetImageResponse.StatusCase} */(jspb.Message.computeOneofCase(this, proto.Image.GetImageResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.GetImageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.GetImageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.GetImageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.GetImageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    image: (f = msg.getImage()) && proto.Image.Image.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.GetImageResponse}
 */
proto.Image.GetImageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.GetImageResponse;
  return proto.Image.GetImageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.GetImageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.GetImageResponse}
 */
proto.Image.GetImageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Image.Image;
      reader.readMessage(value,proto.Image.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 2:
      var value = /** @type {!proto.Image.GetImageErrorStatus} */ (reader.readEnum());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.GetImageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.GetImageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.GetImageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.GetImageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Image.Image.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Image.GetImageErrorStatus} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Image image = 1;
 * @return {?proto.Image.Image}
 */
proto.Image.GetImageResponse.prototype.getImage = function() {
  return /** @type{?proto.Image.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image.Image, 1));
};


/** @param {?proto.Image.Image|undefined} value */
proto.Image.GetImageResponse.prototype.setImage = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Image.GetImageResponse.oneofGroups_[0], value);
};


proto.Image.GetImageResponse.prototype.clearImage = function() {
  this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.GetImageResponse.prototype.hasImage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetImageErrorStatus error = 2;
 * @return {!proto.Image.GetImageErrorStatus}
 */
proto.Image.GetImageResponse.prototype.getError = function() {
  return /** @type {!proto.Image.GetImageErrorStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Image.GetImageErrorStatus} value */
proto.Image.GetImageResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 2, proto.Image.GetImageResponse.oneofGroups_[0], value);
};


proto.Image.GetImageResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 2, proto.Image.GetImageResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.GetImageResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.GetImageDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Image.GetImageDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.GetImageDataRequest.displayName = 'proto.Image.GetImageDataRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.GetImageDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.GetImageDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.GetImageDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.GetImageDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    imageId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.GetImageDataRequest}
 */
proto.Image.GetImageDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.GetImageDataRequest;
  return proto.Image.GetImageDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.GetImageDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.GetImageDataRequest}
 */
proto.Image.GetImageDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.GetImageDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.GetImageDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.GetImageDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.GetImageDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImageId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string image_id = 1;
 * @return {string}
 */
proto.Image.GetImageDataRequest.prototype.getImageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Image.GetImageDataRequest.prototype.setImageId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.GetImageDataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Image.GetImageDataResponse.oneofGroups_);
};
goog.inherits(proto.Image.GetImageDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.GetImageDataResponse.displayName = 'proto.Image.GetImageDataResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Image.GetImageDataResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.Image.GetImageDataResponse.StatusCase = {
  STATUS_NOT_SET: 0,
  DATA: 1,
  IMAGE_TYPE: 2,
  ERROR: 3
};

/**
 * @return {proto.Image.GetImageDataResponse.StatusCase}
 */
proto.Image.GetImageDataResponse.prototype.getStatusCase = function() {
  return /** @type {proto.Image.GetImageDataResponse.StatusCase} */(jspb.Message.computeOneofCase(this, proto.Image.GetImageDataResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.GetImageDataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.GetImageDataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.GetImageDataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.GetImageDataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    imageType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.GetImageDataResponse}
 */
proto.Image.GetImageDataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.GetImageDataResponse;
  return proto.Image.GetImageDataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.GetImageDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.GetImageDataResponse}
 */
proto.Image.GetImageDataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {!proto.Image.ImageType} */ (reader.readEnum());
      msg.setImageType(value);
      break;
    case 3:
      var value = /** @type {!proto.Image.GetImageErrorStatus} */ (reader.readEnum());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.GetImageDataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.GetImageDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.GetImageDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.GetImageDataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!proto.Image.ImageType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.Image.GetImageErrorStatus} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Image.GetImageDataResponse.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.Image.GetImageDataResponse.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.Image.GetImageDataResponse.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.Image.GetImageDataResponse.prototype.setData = function(value) {
  jspb.Message.setOneofField(this, 1, proto.Image.GetImageDataResponse.oneofGroups_[0], value);
};


proto.Image.GetImageDataResponse.prototype.clearData = function() {
  jspb.Message.setOneofField(this, 1, proto.Image.GetImageDataResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.GetImageDataResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ImageType image_type = 2;
 * @return {!proto.Image.ImageType}
 */
proto.Image.GetImageDataResponse.prototype.getImageType = function() {
  return /** @type {!proto.Image.ImageType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Image.ImageType} value */
proto.Image.GetImageDataResponse.prototype.setImageType = function(value) {
  jspb.Message.setOneofField(this, 2, proto.Image.GetImageDataResponse.oneofGroups_[0], value);
};


proto.Image.GetImageDataResponse.prototype.clearImageType = function() {
  jspb.Message.setOneofField(this, 2, proto.Image.GetImageDataResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.GetImageDataResponse.prototype.hasImageType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GetImageErrorStatus error = 3;
 * @return {!proto.Image.GetImageErrorStatus}
 */
proto.Image.GetImageDataResponse.prototype.getError = function() {
  return /** @type {!proto.Image.GetImageErrorStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.Image.GetImageErrorStatus} value */
proto.Image.GetImageDataResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 3, proto.Image.GetImageDataResponse.oneofGroups_[0], value);
};


proto.Image.GetImageDataResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 3, proto.Image.GetImageDataResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.GetImageDataResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.GetUserImagesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Image.GetUserImagesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.GetUserImagesRequest.displayName = 'proto.Image.GetUserImagesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.GetUserImagesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.GetUserImagesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.GetUserImagesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.GetUserImagesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    page: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.GetUserImagesRequest}
 */
proto.Image.GetUserImagesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.GetUserImagesRequest;
  return proto.Image.GetUserImagesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.GetUserImagesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.GetUserImagesRequest}
 */
proto.Image.GetUserImagesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.GetUserImagesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.GetUserImagesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.GetUserImagesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.GetUserImagesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.Image.GetUserImagesRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Image.GetUserImagesRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 size = 2;
 * @return {number}
 */
proto.Image.GetUserImagesRequest.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Image.GetUserImagesRequest.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 page = 3;
 * @return {number}
 */
proto.Image.GetUserImagesRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Image.GetUserImagesRequest.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.GetUserImagesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Image.GetUserImagesResponse.oneofGroups_);
};
goog.inherits(proto.Image.GetUserImagesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.GetUserImagesResponse.displayName = 'proto.Image.GetUserImagesResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Image.GetUserImagesResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Image.GetUserImagesResponse.StatusCase = {
  STATUS_NOT_SET: 0,
  PAGE: 1,
  ERROR: 2
};

/**
 * @return {proto.Image.GetUserImagesResponse.StatusCase}
 */
proto.Image.GetUserImagesResponse.prototype.getStatusCase = function() {
  return /** @type {proto.Image.GetUserImagesResponse.StatusCase} */(jspb.Message.computeOneofCase(this, proto.Image.GetUserImagesResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.GetUserImagesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.GetUserImagesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.GetUserImagesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.GetUserImagesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: (f = msg.getPage()) && proto.Image.UserImagePage.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.GetUserImagesResponse}
 */
proto.Image.GetUserImagesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.GetUserImagesResponse;
  return proto.Image.GetUserImagesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.GetUserImagesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.GetUserImagesResponse}
 */
proto.Image.GetUserImagesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Image.UserImagePage;
      reader.readMessage(value,proto.Image.UserImagePage.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {!proto.Image.GetUserImagesErrorStatus} */ (reader.readEnum());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.GetUserImagesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.GetUserImagesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.GetUserImagesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.GetUserImagesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Image.UserImagePage.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Image.GetUserImagesErrorStatus} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional UserImagePage page = 1;
 * @return {?proto.Image.UserImagePage}
 */
proto.Image.GetUserImagesResponse.prototype.getPage = function() {
  return /** @type{?proto.Image.UserImagePage} */ (
    jspb.Message.getWrapperField(this, proto.Image.UserImagePage, 1));
};


/** @param {?proto.Image.UserImagePage|undefined} value */
proto.Image.GetUserImagesResponse.prototype.setPage = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Image.GetUserImagesResponse.oneofGroups_[0], value);
};


proto.Image.GetUserImagesResponse.prototype.clearPage = function() {
  this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.GetUserImagesResponse.prototype.hasPage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetUserImagesErrorStatus error = 2;
 * @return {!proto.Image.GetUserImagesErrorStatus}
 */
proto.Image.GetUserImagesResponse.prototype.getError = function() {
  return /** @type {!proto.Image.GetUserImagesErrorStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Image.GetUserImagesErrorStatus} value */
proto.Image.GetUserImagesResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 2, proto.Image.GetUserImagesResponse.oneofGroups_[0], value);
};


proto.Image.GetUserImagesResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 2, proto.Image.GetUserImagesResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.GetUserImagesResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.LikeImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Image.LikeImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.LikeImageRequest.displayName = 'proto.Image.LikeImageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.LikeImageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.LikeImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.LikeImageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.LikeImageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    imageId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unlike: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.LikeImageRequest}
 */
proto.Image.LikeImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.LikeImageRequest;
  return proto.Image.LikeImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.LikeImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.LikeImageRequest}
 */
proto.Image.LikeImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnlike(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.LikeImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.LikeImageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.LikeImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.LikeImageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImageId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnlike();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string image_id = 1;
 * @return {string}
 */
proto.Image.LikeImageRequest.prototype.getImageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Image.LikeImageRequest.prototype.setImageId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.Image.LikeImageRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Image.LikeImageRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool unlike = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Image.LikeImageRequest.prototype.getUnlike = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Image.LikeImageRequest.prototype.setUnlike = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.LikeImageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Image.LikeImageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.LikeImageResponse.displayName = 'proto.Image.LikeImageResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.LikeImageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.LikeImageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.LikeImageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.LikeImageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.LikeImageResponse}
 */
proto.Image.LikeImageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.LikeImageResponse;
  return proto.Image.LikeImageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.LikeImageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.LikeImageResponse}
 */
proto.Image.LikeImageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Image.LikeImageResponseStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.LikeImageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.LikeImageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.LikeImageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.LikeImageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional LikeImageResponseStatus status = 1;
 * @return {!proto.Image.LikeImageResponseStatus}
 */
proto.Image.LikeImageResponse.prototype.getStatus = function() {
  return /** @type {!proto.Image.LikeImageResponseStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Image.LikeImageResponseStatus} value */
proto.Image.LikeImageResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.GetLikesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Image.GetLikesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.GetLikesRequest.displayName = 'proto.Image.GetLikesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.GetLikesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.GetLikesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.GetLikesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.GetLikesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    imageId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    page: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.GetLikesRequest}
 */
proto.Image.GetLikesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.GetLikesRequest;
  return proto.Image.GetLikesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.GetLikesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.GetLikesRequest}
 */
proto.Image.GetLikesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.GetLikesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.GetLikesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.GetLikesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.GetLikesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImageId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string image_id = 1;
 * @return {string}
 */
proto.Image.GetLikesRequest.prototype.getImageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Image.GetLikesRequest.prototype.setImageId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 size = 2;
 * @return {number}
 */
proto.Image.GetLikesRequest.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Image.GetLikesRequest.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 page = 3;
 * @return {number}
 */
proto.Image.GetLikesRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Image.GetLikesRequest.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.GetLikesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Image.GetLikesResponse.oneofGroups_);
};
goog.inherits(proto.Image.GetLikesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.GetLikesResponse.displayName = 'proto.Image.GetLikesResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Image.GetLikesResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Image.GetLikesResponse.StatusCase = {
  STATUS_NOT_SET: 0,
  ERROR: 1,
  PAGE: 2
};

/**
 * @return {proto.Image.GetLikesResponse.StatusCase}
 */
proto.Image.GetLikesResponse.prototype.getStatusCase = function() {
  return /** @type {proto.Image.GetLikesResponse.StatusCase} */(jspb.Message.computeOneofCase(this, proto.Image.GetLikesResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.GetLikesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.GetLikesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.GetLikesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.GetLikesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, 0),
    page: (f = msg.getPage()) && proto.Image.ImageLikesPage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.GetLikesResponse}
 */
proto.Image.GetLikesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.GetLikesResponse;
  return proto.Image.GetLikesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.GetLikesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.GetLikesResponse}
 */
proto.Image.GetLikesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Image.GetLikesErrorStatus} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 2:
      var value = new proto.Image.ImageLikesPage;
      reader.readMessage(value,proto.Image.ImageLikesPage.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.GetLikesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.GetLikesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.GetLikesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.GetLikesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Image.GetLikesErrorStatus} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Image.ImageLikesPage.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetLikesErrorStatus error = 1;
 * @return {!proto.Image.GetLikesErrorStatus}
 */
proto.Image.GetLikesResponse.prototype.getError = function() {
  return /** @type {!proto.Image.GetLikesErrorStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Image.GetLikesErrorStatus} value */
proto.Image.GetLikesResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 1, proto.Image.GetLikesResponse.oneofGroups_[0], value);
};


proto.Image.GetLikesResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 1, proto.Image.GetLikesResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.GetLikesResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ImageLikesPage page = 2;
 * @return {?proto.Image.ImageLikesPage}
 */
proto.Image.GetLikesResponse.prototype.getPage = function() {
  return /** @type{?proto.Image.ImageLikesPage} */ (
    jspb.Message.getWrapperField(this, proto.Image.ImageLikesPage, 2));
};


/** @param {?proto.Image.ImageLikesPage|undefined} value */
proto.Image.GetLikesResponse.prototype.setPage = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.Image.GetLikesResponse.oneofGroups_[0], value);
};


proto.Image.GetLikesResponse.prototype.clearPage = function() {
  this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.GetLikesResponse.prototype.hasPage = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.SearchImagesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Image.SearchImagesRequest.oneofGroups_);
};
goog.inherits(proto.Image.SearchImagesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.SearchImagesRequest.displayName = 'proto.Image.SearchImagesRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Image.SearchImagesRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Image.SearchImagesRequest.SearchCase = {
  SEARCH_NOT_SET: 0,
  HASH_TAG: 1,
  USER_TAG: 2
};

/**
 * @return {proto.Image.SearchImagesRequest.SearchCase}
 */
proto.Image.SearchImagesRequest.prototype.getSearchCase = function() {
  return /** @type {proto.Image.SearchImagesRequest.SearchCase} */(jspb.Message.computeOneofCase(this, proto.Image.SearchImagesRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.SearchImagesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.SearchImagesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.SearchImagesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.SearchImagesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hashTag: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userTag: jspb.Message.getFieldWithDefault(msg, 2, ""),
    size: jspb.Message.getFieldWithDefault(msg, 3, 0),
    page: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.SearchImagesRequest}
 */
proto.Image.SearchImagesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.SearchImagesRequest;
  return proto.Image.SearchImagesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.SearchImagesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.SearchImagesRequest}
 */
proto.Image.SearchImagesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashTag(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserTag(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.SearchImagesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.SearchImagesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.SearchImagesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.SearchImagesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string hash_tag = 1;
 * @return {string}
 */
proto.Image.SearchImagesRequest.prototype.getHashTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Image.SearchImagesRequest.prototype.setHashTag = function(value) {
  jspb.Message.setOneofField(this, 1, proto.Image.SearchImagesRequest.oneofGroups_[0], value);
};


proto.Image.SearchImagesRequest.prototype.clearHashTag = function() {
  jspb.Message.setOneofField(this, 1, proto.Image.SearchImagesRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.SearchImagesRequest.prototype.hasHashTag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user_tag = 2;
 * @return {string}
 */
proto.Image.SearchImagesRequest.prototype.getUserTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Image.SearchImagesRequest.prototype.setUserTag = function(value) {
  jspb.Message.setOneofField(this, 2, proto.Image.SearchImagesRequest.oneofGroups_[0], value);
};


proto.Image.SearchImagesRequest.prototype.clearUserTag = function() {
  jspb.Message.setOneofField(this, 2, proto.Image.SearchImagesRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.SearchImagesRequest.prototype.hasUserTag = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 size = 3;
 * @return {number}
 */
proto.Image.SearchImagesRequest.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Image.SearchImagesRequest.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 page = 4;
 * @return {number}
 */
proto.Image.SearchImagesRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Image.SearchImagesRequest.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.SearchImagesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Image.SearchImagesResponse.oneofGroups_);
};
goog.inherits(proto.Image.SearchImagesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.SearchImagesResponse.displayName = 'proto.Image.SearchImagesResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Image.SearchImagesResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Image.SearchImagesResponse.StatusCase = {
  STATUS_NOT_SET: 0,
  PAGE: 1,
  ERROR: 2
};

/**
 * @return {proto.Image.SearchImagesResponse.StatusCase}
 */
proto.Image.SearchImagesResponse.prototype.getStatusCase = function() {
  return /** @type {proto.Image.SearchImagesResponse.StatusCase} */(jspb.Message.computeOneofCase(this, proto.Image.SearchImagesResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.SearchImagesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.SearchImagesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.SearchImagesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.SearchImagesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: (f = msg.getPage()) && proto.Image.ImageSearchPage.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.SearchImagesResponse}
 */
proto.Image.SearchImagesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.SearchImagesResponse;
  return proto.Image.SearchImagesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.SearchImagesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.SearchImagesResponse}
 */
proto.Image.SearchImagesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Image.ImageSearchPage;
      reader.readMessage(value,proto.Image.ImageSearchPage.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {!proto.Image.SearchImagesErrorStatus} */ (reader.readEnum());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.SearchImagesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.SearchImagesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.SearchImagesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.SearchImagesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Image.ImageSearchPage.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Image.SearchImagesErrorStatus} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional ImageSearchPage page = 1;
 * @return {?proto.Image.ImageSearchPage}
 */
proto.Image.SearchImagesResponse.prototype.getPage = function() {
  return /** @type{?proto.Image.ImageSearchPage} */ (
    jspb.Message.getWrapperField(this, proto.Image.ImageSearchPage, 1));
};


/** @param {?proto.Image.ImageSearchPage|undefined} value */
proto.Image.SearchImagesResponse.prototype.setPage = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Image.SearchImagesResponse.oneofGroups_[0], value);
};


proto.Image.SearchImagesResponse.prototype.clearPage = function() {
  this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.SearchImagesResponse.prototype.hasPage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SearchImagesErrorStatus error = 2;
 * @return {!proto.Image.SearchImagesErrorStatus}
 */
proto.Image.SearchImagesResponse.prototype.getError = function() {
  return /** @type {!proto.Image.SearchImagesErrorStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Image.SearchImagesErrorStatus} value */
proto.Image.SearchImagesResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 2, proto.Image.SearchImagesResponse.oneofGroups_[0], value);
};


proto.Image.SearchImagesResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 2, proto.Image.SearchImagesResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.SearchImagesResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.ImageSearchPage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Image.ImageSearchPage.repeatedFields_, proto.Image.ImageSearchPage.oneofGroups_);
};
goog.inherits(proto.Image.ImageSearchPage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.ImageSearchPage.displayName = 'proto.Image.ImageSearchPage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Image.ImageSearchPage.repeatedFields_ = [7];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Image.ImageSearchPage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Image.ImageSearchPage.SearchCase = {
  SEARCH_NOT_SET: 0,
  HASH_TAG: 1,
  USER_TAG: 2
};

/**
 * @return {proto.Image.ImageSearchPage.SearchCase}
 */
proto.Image.ImageSearchPage.prototype.getSearchCase = function() {
  return /** @type {proto.Image.ImageSearchPage.SearchCase} */(jspb.Message.computeOneofCase(this, proto.Image.ImageSearchPage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.ImageSearchPage.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.ImageSearchPage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.ImageSearchPage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.ImageSearchPage.toObject = function(includeInstance, msg) {
  var f, obj = {
    hashTag: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userTag: jspb.Message.getFieldWithDefault(msg, 2, ""),
    size: jspb.Message.getFieldWithDefault(msg, 3, 0),
    page: jspb.Message.getFieldWithDefault(msg, 4, 0),
    count: jspb.Message.getFieldWithDefault(msg, 5, 0),
    totalCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    imagesList: jspb.Message.toObjectList(msg.getImagesList(),
    proto.Image.Image.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.ImageSearchPage}
 */
proto.Image.ImageSearchPage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.ImageSearchPage;
  return proto.Image.ImageSearchPage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.ImageSearchPage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.ImageSearchPage}
 */
proto.Image.ImageSearchPage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashTag(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserTag(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    case 7:
      var value = new proto.Image.Image;
      reader.readMessage(value,proto.Image.Image.deserializeBinaryFromReader);
      msg.addImages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.ImageSearchPage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.ImageSearchPage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.ImageSearchPage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.ImageSearchPage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.Image.Image.serializeBinaryToWriter
    );
  }
};


/**
 * optional string hash_tag = 1;
 * @return {string}
 */
proto.Image.ImageSearchPage.prototype.getHashTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Image.ImageSearchPage.prototype.setHashTag = function(value) {
  jspb.Message.setOneofField(this, 1, proto.Image.ImageSearchPage.oneofGroups_[0], value);
};


proto.Image.ImageSearchPage.prototype.clearHashTag = function() {
  jspb.Message.setOneofField(this, 1, proto.Image.ImageSearchPage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.ImageSearchPage.prototype.hasHashTag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user_tag = 2;
 * @return {string}
 */
proto.Image.ImageSearchPage.prototype.getUserTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Image.ImageSearchPage.prototype.setUserTag = function(value) {
  jspb.Message.setOneofField(this, 2, proto.Image.ImageSearchPage.oneofGroups_[0], value);
};


proto.Image.ImageSearchPage.prototype.clearUserTag = function() {
  jspb.Message.setOneofField(this, 2, proto.Image.ImageSearchPage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Image.ImageSearchPage.prototype.hasUserTag = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 size = 3;
 * @return {number}
 */
proto.Image.ImageSearchPage.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Image.ImageSearchPage.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 page = 4;
 * @return {number}
 */
proto.Image.ImageSearchPage.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Image.ImageSearchPage.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 count = 5;
 * @return {number}
 */
proto.Image.ImageSearchPage.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Image.ImageSearchPage.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 total_count = 6;
 * @return {number}
 */
proto.Image.ImageSearchPage.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Image.ImageSearchPage.prototype.setTotalCount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated Image images = 7;
 * @return {!Array<!proto.Image.Image>}
 */
proto.Image.ImageSearchPage.prototype.getImagesList = function() {
  return /** @type{!Array<!proto.Image.Image>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Image.Image, 7));
};


/** @param {!Array<!proto.Image.Image>} value */
proto.Image.ImageSearchPage.prototype.setImagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.Image.Image=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Image.Image}
 */
proto.Image.ImageSearchPage.prototype.addImages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.Image.Image, opt_index);
};


proto.Image.ImageSearchPage.prototype.clearImagesList = function() {
  this.setImagesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.UserImagePage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Image.UserImagePage.repeatedFields_, null);
};
goog.inherits(proto.Image.UserImagePage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.UserImagePage.displayName = 'proto.Image.UserImagePage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Image.UserImagePage.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.UserImagePage.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.UserImagePage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.UserImagePage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.UserImagePage.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    page: jspb.Message.getFieldWithDefault(msg, 3, 0),
    count: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    imagesList: jspb.Message.toObjectList(msg.getImagesList(),
    proto.Image.Image.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.UserImagePage}
 */
proto.Image.UserImagePage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.UserImagePage;
  return proto.Image.UserImagePage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.UserImagePage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.UserImagePage}
 */
proto.Image.UserImagePage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    case 6:
      var value = new proto.Image.Image;
      reader.readMessage(value,proto.Image.Image.deserializeBinaryFromReader);
      msg.addImages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.UserImagePage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.UserImagePage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.UserImagePage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.UserImagePage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.Image.Image.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.Image.UserImagePage.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Image.UserImagePage.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 size = 2;
 * @return {number}
 */
proto.Image.UserImagePage.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Image.UserImagePage.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 page = 3;
 * @return {number}
 */
proto.Image.UserImagePage.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Image.UserImagePage.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 count = 4;
 * @return {number}
 */
proto.Image.UserImagePage.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Image.UserImagePage.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 total_count = 5;
 * @return {number}
 */
proto.Image.UserImagePage.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Image.UserImagePage.prototype.setTotalCount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Image images = 6;
 * @return {!Array<!proto.Image.Image>}
 */
proto.Image.UserImagePage.prototype.getImagesList = function() {
  return /** @type{!Array<!proto.Image.Image>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Image.Image, 6));
};


/** @param {!Array<!proto.Image.Image>} value */
proto.Image.UserImagePage.prototype.setImagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.Image.Image=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Image.Image}
 */
proto.Image.UserImagePage.prototype.addImages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Image.Image, opt_index);
};


proto.Image.UserImagePage.prototype.clearImagesList = function() {
  this.setImagesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Image.Image.repeatedFields_, null);
};
goog.inherits(proto.Image.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.Image.displayName = 'proto.Image.Image';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Image.Image.repeatedFields_ = [8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mimeType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    width: jspb.Message.getFieldWithDefault(msg, 3, 0),
    height: jspb.Message.getFieldWithDefault(msg, 4, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    caption: jspb.Message.getFieldWithDefault(msg, 6, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 7, ""),
    userTagsList: jspb.Message.getRepeatedField(msg, 8),
    hashTagsList: jspb.Message.getRepeatedField(msg, 9),
    likes: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.Image}
 */
proto.Image.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.Image;
  return proto.Image.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.Image}
 */
proto.Image.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimeType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaption(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserTags(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addHashTags(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLikes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMimeType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCaption();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUserTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getHashTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getLikes();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Image.Image.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Image.Image.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mime_type = 2;
 * @return {string}
 */
proto.Image.Image.prototype.getMimeType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Image.Image.prototype.setMimeType = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 width = 3;
 * @return {number}
 */
proto.Image.Image.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Image.Image.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 height = 4;
 * @return {number}
 */
proto.Image.Image.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Image.Image.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string user_id = 5;
 * @return {string}
 */
proto.Image.Image.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Image.Image.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string caption = 6;
 * @return {string}
 */
proto.Image.Image.prototype.getCaption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Image.Image.prototype.setCaption = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string created_at = 7;
 * @return {string}
 */
proto.Image.Image.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.Image.Image.prototype.setCreatedAt = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated string user_tags = 8;
 * @return {!Array<string>}
 */
proto.Image.Image.prototype.getUserTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.Image.Image.prototype.setUserTagsList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.Image.Image.prototype.addUserTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.Image.Image.prototype.clearUserTagsList = function() {
  this.setUserTagsList([]);
};


/**
 * repeated string hash_tags = 9;
 * @return {!Array<string>}
 */
proto.Image.Image.prototype.getHashTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array<string>} value */
proto.Image.Image.prototype.setHashTagsList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.Image.Image.prototype.addHashTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.Image.Image.prototype.clearHashTagsList = function() {
  this.setHashTagsList([]);
};


/**
 * optional int32 likes = 10;
 * @return {number}
 */
proto.Image.Image.prototype.getLikes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.Image.Image.prototype.setLikes = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image.ImageLikesPage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Image.ImageLikesPage.repeatedFields_, null);
};
goog.inherits(proto.Image.ImageLikesPage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.ImageLikesPage.displayName = 'proto.Image.ImageLikesPage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Image.ImageLikesPage.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.ImageLikesPage.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.ImageLikesPage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image.ImageLikesPage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.ImageLikesPage.toObject = function(includeInstance, msg) {
  var f, obj = {
    imageId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    page: jspb.Message.getFieldWithDefault(msg, 3, 0),
    usersCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalUsersCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    usersList: jspb.Message.getRepeatedField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image.ImageLikesPage}
 */
proto.Image.ImageLikesPage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image.ImageLikesPage;
  return proto.Image.ImageLikesPage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image.ImageLikesPage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image.ImageLikesPage}
 */
proto.Image.ImageLikesPage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUsersCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalUsersCount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.ImageLikesPage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.ImageLikesPage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image.ImageLikesPage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.ImageLikesPage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImageId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getUsersCount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTotalUsersCount();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
};


/**
 * optional string image_id = 1;
 * @return {string}
 */
proto.Image.ImageLikesPage.prototype.getImageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Image.ImageLikesPage.prototype.setImageId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 size = 2;
 * @return {number}
 */
proto.Image.ImageLikesPage.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Image.ImageLikesPage.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 page = 3;
 * @return {number}
 */
proto.Image.ImageLikesPage.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Image.ImageLikesPage.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 users_count = 4;
 * @return {number}
 */
proto.Image.ImageLikesPage.prototype.getUsersCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Image.ImageLikesPage.prototype.setUsersCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 total_users_count = 5;
 * @return {number}
 */
proto.Image.ImageLikesPage.prototype.getTotalUsersCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Image.ImageLikesPage.prototype.setTotalUsersCount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated string users = 6;
 * @return {!Array<string>}
 */
proto.Image.ImageLikesPage.prototype.getUsersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.Image.ImageLikesPage.prototype.setUsersList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.Image.ImageLikesPage.prototype.addUsers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.Image.ImageLikesPage.prototype.clearUsersList = function() {
  this.setUsersList([]);
};


/**
 * @enum {number}
 */
proto.Image.ImageType = {
  PNG: 0,
  JPG: 1
};

/**
 * @enum {number}
 */
proto.Image.CreateImageErrorStatus = {
  CREATE_IMAGE_SERVER_ERROR: 0,
  CONTENT_TOO_LONG: 1,
  CREATOR_NOT_FOUND: 2,
  INVALID_DATA: 3,
  CAPTION_TOO_LONG: 4
};

/**
 * @enum {number}
 */
proto.Image.DeleteImageStatus = {
  DELETE_IMAGE_SERVER_ERROR: 0,
  DELETABLE_NOT_FOUND: 1,
  OK: 2
};

/**
 * @enum {number}
 */
proto.Image.GetImageErrorStatus = {
  GET_IMAGE_SERVER_ERROR: 0,
  IMAGE_NOT_FOUND: 1
};

/**
 * @enum {number}
 */
proto.Image.GetUserImagesErrorStatus = {
  GET_USER_IMAGES_SERVER_ERROR: 0,
  USER_NOT_FOUND: 1
};

/**
 * @enum {number}
 */
proto.Image.LikeImageResponseStatus = {
  LIKE_IMAGE_SERVER_ERROR: 0,
  IMAGE_NOT_FOUND_ERROR: 1,
  USER_NOT_FOUND_ERROR: 2,
  LIKE_OK: 3
};

/**
 * @enum {number}
 */
proto.Image.GetLikesErrorStatus = {
  GET_LIKES_SERVER_ERROR: 0,
  GET_LIKES_IMAGE_NOT_FOUND: 1
};

/**
 * @enum {number}
 */
proto.Image.SearchImagesErrorStatus = {
  SEARCH_IMAGES_SERVER_ERROR: 0,
  EMPTY_SEARCH: 1
};

goog.object.extend(exports, proto.Image);
