syntax = "proto3";


package Auth;

// Authentication service definition
service Auth {

    // Sign up a new user account
    rpc SignUp(NewAccount) returns (SignUpResponse) {}

    // Sign the user in, get proper tokens as response
    rpc SignIn(UserCredentials) returns (SignInResponse) {}

    // Get a new pair of access and refresh tokens
    rpc RenewToken(RenewRequest) returns (RenewResponse) {}

    // Get account details based on access token
    rpc GetAccount(AccountRequest) returns (AccountResponse) {}

    rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse) {}
    
}

message NewAccount {
    string username = 1;
    string password = 2;
}

message SignInResponse {
    oneof status {
        JWTTokens tokens = 1;
        AuthErrorStatus error = 2;
    }
}

enum AuthErrorStatus {
    SERVER_ERROR = 0;
    NOT_FOUND = 1;
    BAD_CREDENTIALS = 2;
    INVALID_TOKEN = 3;
    EXPIRED_TOKEN = 4;
}

enum SignUpErrorStatus {
    USERNAME_IN_USE = 0;
    SIGNUP_SERVER_ERROR = 1;
    SIGNUP_INVALID_PASSWORD = 3;
    SIGNUP_INVALID_USERNAME = 4;
}

enum DeleteAccountErrorStatus {
    DELETE_SERVER_ERROR = 0;
    DELETE_NOT_FOUND = 1;
    DELETE_INVALID_TOKEN = 2;
    DELETE_TOKEN_EXPIRED = 3;
}

message SignUpResponse {
    oneof status {
        AccountInfo account = 1;
        SignUpErrorStatus error = 2;
    }
}

message DeleteAccountRequest {
    string access_token = 1;
}

message DeleteAccountResponse {
    oneof status {
        string id = 1;
        DeleteAccountErrorStatus error = 2;
    }
}

message AccountResponse {
    oneof status {
        AccountInfo account = 1;
        AuthErrorStatus error = 2;
    }
}

message UserCredentials {
    string username = 1;
    string password = 2;
}

message AccountInfo {
    string id = 1;
    string username = 2;
    string created_at = 3;
    string updated_at = 4;
}

message JWTTokens {
    string access_token = 1;
    string refresh_token = 2;
}

message RenewRequest {
    string refresh_token = 1;
}

message RenewResponse {
    oneof status {
        JWTTokens tokens = 1;
        AuthErrorStatus error = 2;
    }
}

message AccountRequest {
    string access_token = 1;
}
