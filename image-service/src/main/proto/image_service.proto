syntax = "proto3";
option java_package = "com.instagram_clone.image_service";
option java_multiple_files = true;
option java_outer_classname = "ImageService";

package Image;

// Service that is exposed via gRPC
service Images {

  // Create a new image
  rpc CreateImage(stream CreateImageRequest) returns (CreateImageResponse) {}

  // Delete an image
  rpc DeleteImage(DeleteImageRequest) returns (DeleteImageResponse) {}

  // Get a single image (metadata)
  rpc GetImage(GetImageRequest) returns (GetImageResponse) {}

  // Get image data
  rpc GetImageData(GetImageDataRequest) returns (stream GetImageDataResponse) {}

  // Get user's images
  rpc GetUserImages(GetUserImagesRequest) returns (GetUserImagesResponse) {}

  // Search for images based on hash tags or user tags
  rpc SearchImages(SearchImagesRequest) returns (SearchImagesResponse) {}

  // Like or unlike an image
  rpc LikeImage(LikeImageRequest) returns (LikeImageResponse) {}

  // Get image likes as paginated result set
  rpc GetImageLikes(GetLikesRequest) returns (GetLikesResponse) {}
}

// =====================
// Create image
// =====================

message CreateImageRequest {
  // Streaming request; on first chunk metadata, otherwise data
  oneof part {
    Metadata meta_data = 1;
    bytes data = 2;
  }
}

message Metadata {
  string caption = 1;         // Image caption
  string creator_id = 2;      // Image poster
  ImageType image_type = 3;   // Image type (png/jpg)
}

enum ImageType {
  PNG = 0;
  JPG = 1;
}

message CreateImageResponse {
  oneof status {
    Image image = 1;
    CreateImageErrorStatus error = 2;
  }
}

enum CreateImageErrorStatus {
  CREATE_IMAGE_SERVER_ERROR = 0;
  CONTENT_TOO_LONG = 1;
  CREATOR_NOT_FOUND = 2;
  INVALID_DATA = 3;
  CAPTION_TOO_LONG = 4;
}

// =====================
// Delete image
// =====================

message DeleteImageRequest {
  string id = 1;
}

message DeleteImageResponse {
  DeleteImageStatus status = 1;
}

enum DeleteImageStatus {
  DELETE_IMAGE_SERVER_ERROR = 0;
  DELETABLE_NOT_FOUND = 1;
  OK = 2;
}

// =====================
// Get image
// =====================

message GetImageRequest {
  string image_id = 1;
}

message GetImageResponse {
  oneof status {
    Image image = 1;
    GetImageErrorStatus error = 2;
  }
}

enum GetImageErrorStatus {
  GET_IMAGE_SERVER_ERROR = 0;
  IMAGE_NOT_FOUND = 1;
}

// =====================
// Get image data
// =====================

message GetImageDataRequest {
  string image_id = 1;
}

message GetImageDataResponse {
  oneof status {
    bytes data = 1;
    ImageType image_type = 2;
    GetImageErrorStatus error = 3;
  }
}

// =====================
// Get user's images
// =====================

message GetUserImagesRequest {
  string user_id = 1;
  int32 size = 2;
  int32 page = 3;
}

message GetUserImagesResponse {
  oneof status {
    UserImagePage page = 1;
    GetUserImagesErrorStatus error = 2;
  }
}

enum GetUserImagesErrorStatus {
  GET_USER_IMAGES_SERVER_ERROR = 0;
  USER_NOT_FOUND = 1;
}

// =====================
// Like user's image
// =====================

message LikeImageRequest {
  string image_id = 1;
  string user_id = 2;
  bool unlike = 3;
}

message LikeImageResponse {
  LikeImageResponseStatus status = 1;
}

enum LikeImageResponseStatus {
  LIKE_IMAGE_SERVER_ERROR = 0;
  IMAGE_NOT_FOUND_ERROR = 1;
  USER_NOT_FOUND_ERROR = 2;
  LIKE_OK = 3;
}

// =====================
// Get image likes
// =====================

message GetLikesRequest {
  string image_id = 1;
  int32 size = 2;
  int32 page = 3;
}

message GetLikesResponse {
  oneof status {
    GetLikesErrorStatus error = 1;
    ImageLikesPage page = 2;
  }
}

enum GetLikesErrorStatus {
  GET_LIKES_SERVER_ERROR = 0;
  GET_LIKES_IMAGE_NOT_FOUND = 1;
}

// =====================
// Search for images by hash tag or user tag
// =====================

message SearchImagesRequest {
  oneof search {
    string hash_tag = 1;
    string user_tag = 2;
  }
  int32 size = 3;
  int32 page = 4;
}

message SearchImagesResponse {
  oneof status {
    ImageSearchPage page = 1;
    SearchImagesErrorStatus error = 2;
  }
}

enum SearchImagesErrorStatus {
  SEARCH_IMAGES_SERVER_ERROR = 0;
  EMPTY_SEARCH = 1; // Empty search string
}


// =====================
// Models
// =====================

message ImageSearchPage {

  // Search either by user tag or hash tag
  oneof search {
    string hash_tag = 1;
    string user_tag = 2;
  }

  // Page size (e.g. 20); guaranteed maximum of retrieved images
  int32 size = 3;

  // Page number (e.g. 2)
  int32 page = 4;

  // Count of images in this response
  int32 count = 5;

  // Total count of results for the given search
  int32 total_count = 6;

  // Array of images; less than or equal to "size"
  repeated Image images = 7;
}

message UserImagePage {

  // ID of the user
  string user_id = 1;

  // Page size (e.g. 20); guaranteed maximum of retrieved images
  int32 size = 2;

  // Page number (e.g. 2)
  int32 page = 3;

  // Count of images in this response
  int32 count = 4;

  // Total count of images for the user (e.g. 284)
  int32 total_count = 5;

  // Array of images; less or equal to "size"
  repeated Image images = 6;
}

message Image {

  // ID of the image
  string id = 1;

  // Mime type of the image, e.g. img/png or img/jpeg
  string mime_type = 2;

  // Width in pixels
  int32 width = 3;

  // Height in pixels
  int32 height = 4;

  // Image poster ID
  string user_id = 5;

  // Image caption
  string caption = 6;

  // Created at timestamp
  string created_at = 7;

  // Users marked into the image caption
  repeated string user_tags = 8;

  // Hash tags marked into the image caption
  repeated string hash_tags = 9;

  // Like counter
  int32 likes = 10;
}

message ImageLikesPage {

  // Image ID
  string image_id = 1;

  // Page size (e.g. 20); guaranteed maximum of retrieved likes
  int32 size = 2;

  // Page number (e.g. 2)
  int32 page = 3;

  // User count in this page
  int32 users_count = 4;

  // Total user count
  int32 total_users_count = 5;

  // Array of user IDs who have liked the image
  repeated string users = 6;
}
